// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: season.proto

package teams

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeasonServiceClient is the client API for SeasonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeasonServiceClient interface {
	GetSeason(ctx context.Context, in *SeasonRequest, opts ...grpc.CallOption) (*Season, error)
	GetSeasonRanking(ctx context.Context, in *SeasonRequest, opts ...grpc.CallOption) (*SeasonRankingResponse, error)
}

type seasonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeasonServiceClient(cc grpc.ClientConnInterface) SeasonServiceClient {
	return &seasonServiceClient{cc}
}

func (c *seasonServiceClient) GetSeason(ctx context.Context, in *SeasonRequest, opts ...grpc.CallOption) (*Season, error) {
	out := new(Season)
	err := c.cc.Invoke(ctx, "/teams.SeasonService/GetSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) GetSeasonRanking(ctx context.Context, in *SeasonRequest, opts ...grpc.CallOption) (*SeasonRankingResponse, error) {
	out := new(SeasonRankingResponse)
	err := c.cc.Invoke(ctx, "/teams.SeasonService/GetSeasonRanking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeasonServiceServer is the server API for SeasonService service.
// All implementations must embed UnimplementedSeasonServiceServer
// for forward compatibility
type SeasonServiceServer interface {
	GetSeason(context.Context, *SeasonRequest) (*Season, error)
	GetSeasonRanking(context.Context, *SeasonRequest) (*SeasonRankingResponse, error)
	mustEmbedUnimplementedSeasonServiceServer()
}

// UnimplementedSeasonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeasonServiceServer struct {
}

func (UnimplementedSeasonServiceServer) GetSeason(context.Context, *SeasonRequest) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeason not implemented")
}
func (UnimplementedSeasonServiceServer) GetSeasonRanking(context.Context, *SeasonRequest) (*SeasonRankingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonRanking not implemented")
}
func (UnimplementedSeasonServiceServer) mustEmbedUnimplementedSeasonServiceServer() {}

// UnsafeSeasonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeasonServiceServer will
// result in compilation errors.
type UnsafeSeasonServiceServer interface {
	mustEmbedUnimplementedSeasonServiceServer()
}

func RegisterSeasonServiceServer(s grpc.ServiceRegistrar, srv SeasonServiceServer) {
	s.RegisterService(&SeasonService_ServiceDesc, srv)
}

func _SeasonService_GetSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).GetSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teams.SeasonService/GetSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).GetSeason(ctx, req.(*SeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_GetSeasonRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).GetSeasonRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teams.SeasonService/GetSeasonRanking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).GetSeasonRanking(ctx, req.(*SeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeasonService_ServiceDesc is the grpc.ServiceDesc for SeasonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeasonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teams.SeasonService",
	HandlerType: (*SeasonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeason",
			Handler:    _SeasonService_GetSeason_Handler,
		},
		{
			MethodName: "GetSeasonRanking",
			Handler:    _SeasonService_GetSeasonRanking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "season.proto",
}
